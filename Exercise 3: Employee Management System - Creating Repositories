1. Overview of Spring Data Repositories
Benefits of Using Spring Data Repositories:

Simplified CRUD Operations: Spring Data JPA repositories provide built-in methods for standard CRUD operations (Create, Read, Update, Delete) without requiring you to write SQL queries or boilerplate code.
Derived Query Methods: Spring Data JPA allows you to define custom query methods by simply declaring method names that follow a specific naming convention. This reduces the need to write complex queries.
Custom Queries: If derived queries are insufficient, you can write custom queries using JPQL (Java Persistence Query Language) or native SQL.
Pagination and Sorting: Spring Data JPA repositories offer built-in support for pagination and sorting, making it easier to handle large datasets.
Integration with Spring Boot: Spring Data repositories are tightly integrated with Spring Boot, allowing for easy setup and configuration with minimal boilerplate code.

2. Creating Repositories
package com.example.EmployeeManagementSystem.repository;

import com.example.EmployeeManagementSystem.entity.Employee;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long> {

   
    List<Employee> findByDepartmentId(Long departmentId);

    
    List<Employee> findByName(String name);
}

b. Create DepartmentRepository Interface:
package com.example.EmployeeManagementSystem.repository;

import com.example.EmployeeManagementSystem.entity.Department;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface DepartmentRepository extends JpaRepository<Department, Long> {

   
    Department findByName(String name);
}


